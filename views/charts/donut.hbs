<style>
.ms-NavBar{
    display:none;
}
</style>  

<p class="ms-font-xxl">Preview Chart</p>

{{#if mode}}
    <span class='ms-font-s'>Below is a preview of the chart your recipients will see in this
        email after responding to the poll.
    </span><br/></br><br/>
{{/if}}

<div class="ms-Grid">
    <div class="ms-Grid-row">
        <span id ="donutTitle" class="ms-Grid-col">
        </span>
    </div>
    <div class="ms-Grid-row">
        <span id ="donutChart" class="ms-Grid-col">
        </span>
    </div>
     <div class="ms-Grid-row button-container">
        <span class="ms-Grid-col">
            {{#if mode}}
                <a href="/polls/view/{{poll.body.value.0.RowKey}}">
                    <button class="ms-Button" type="button">Back</button>
                </a>
            {{/if}}
            <a href='/polls/insert/{{poll.body.value.0.RowKey}}'>
                <button class="ms-Button ms-Button--primary" type='button'>Done</button>
            </a>
        </span>
    </div> 
</div>

<script src="/../scripts/vendor/d3.min.js" data-semver="3.4.6" data-require="d3@*"></script>
<script>
    (function(d3) {
        'use strict';
    
        var poll = {{{toJSON poll.body.value}}};
        var questions = {{{toJSON questions.body.value}}};
        var answers = {{{toJSON answers.body.value}}};
        var colors = [];
        
        var dataset = [];
        for (var i=0; i<answers.length; i++){
            var obj = {}
            obj.label = answers[i].answer;
            obj.count = answers[i].tally;
            obj.enabled = true;
            dataset.push(obj);
            colors.push('#'+answers[i].color);
        };
        
        var width = window.innerWidth / 1.3
        var height = width - (width/2);
        var scale = ((width + height) / 45);
        
        var radius = Math.min(width, height) / 2;
        var donutWidth = radius / 2;
        
        var color = d3.scale.ordinal()
            .range(colors); 
        
        var title = d3.select('#donutTitle')
            .append('ms-font-l')
            .text(questions[0].question)
            .style('font-size', scale * 2.3 + 'px');
            
        var svg = d3.select('#donutChart')
            .append('svg')
            .attr('width', width * 2)
            .attr('height', height)
            .append('g')
            .attr('transform', 'translate(' + (width * 0.25) + 
            ',' + (height / 2) + ')');

        var arc = d3.svg.arc()
            .innerRadius(radius - donutWidth)
            .outerRadius(radius);

        var pie = d3.layout.pie()
            .value(function(d) { return d.count; })
            .sort(null);
            
        var path = svg.selectAll('path')
            .data(pie(dataset))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', function(d, i) { 
                return color(d.data.label); 
            })                                                        
            .each(function(d) { this._current = d; });                
        
        var legendRectSize = scale * 2;
        var legendSpacing = scale;

        var legend = svg.selectAll('.legend')
        .data(color.domain())
        .enter()
        .append('g')
        .attr('class', 'legend')
        .attr('transform', function(d, i) {
            var height = legendRectSize + legendSpacing;
            var offset =  height * color.domain().length / 2;
            var horz = scale * 12;
            var vert = i * height - offset;
            return 'translate(' + horz + ',' + vert + ')';
        });
        
        legend.append('rect')
        .attr('width', legendRectSize)
        .attr('height', legendRectSize)                                   
        .style('fill', color)
        .style('stroke', color)                                   
        .on('click', function(label) {                            
            var rect = d3.select(this);                             
            var enabled = true;                                     
            var totalEnabled = d3.sum(dataset.map(function(d) {     
            return (d.enabled) ? 1 : 0;                           
            }));                                                    
            
            if (rect.attr('class') === 'disabled') {                
            rect.attr('class', '');                               
            } else {                                                
            if (totalEnabled < 2) return;                         
            rect.attr('class', 'disabled');                       
            enabled = false;                                      
            }                                                       

            pie.value(function(d) {                                 
            if (d.label === label) d.enabled = enabled;           
            return (d.enabled) ? d.count : 0;                     
            });                                                     

            path = path.data(pie(dataset));                         

            path.transition()                                       
            .duration(750)                                        
            .attrTween('d', function(d) {                         
                var interpolate = d3.interpolate(this._current, d); 
                this._current = interpolate(0);                     
                return function(t) {                                
                return arc(interpolate(t));                       
                };                                                  
            });                                               
        });                                                       
              
        legend.append('text')
        .data(dataset)
        .attr('x', legendRectSize + legendSpacing)
        .attr('y', legendRectSize - (legendSpacing / 2))
        .attr('style', 'font-size:'+(scale * 1.5))
        .text(function(d) {
            var total = d3.sum(dataset.map(function(d) {
                return d.count;
            }));
            var percent = Math.round(1000 * d.count / total) / 10; 
            return d.label + " (" + percent + "%)";
        });
        
    })(window.d3);
</script>
